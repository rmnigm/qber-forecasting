#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport

all_structs = []


class Iface(object):
    def retrieveEst(self, eMu, eMuEma, eNu1, eNu2, qMu, qNu1, qNu2, maintenance):
        """
        Parameters:
         - eMu
         - eMuEma
         - eNu1
         - eNu2
         - qMu
         - qNu1
         - qNu2
         - maintenance

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def retrieveEst(self, eMu, eMuEma, eNu1, eNu2, qMu, qNu1, qNu2, maintenance):
        """
        Parameters:
         - eMu
         - eMuEma
         - eNu1
         - eNu2
         - qMu
         - qNu1
         - qNu2
         - maintenance

        """
        self.send_retrieveEst(eMu, eMuEma, eNu1, eNu2, qMu, qNu1, qNu2, maintenance)
        return self.recv_retrieveEst()

    def send_retrieveEst(self, eMu, eMuEma, eNu1, eNu2, qMu, qNu1, qNu2, maintenance):
        self._oprot.writeMessageBegin('retrieveEst', TMessageType.CALL, self._seqid)
        args = retrieveEst_args()
        args.eMu = eMu
        args.eMuEma = eMuEma
        args.eNu1 = eNu1
        args.eNu2 = eNu2
        args.qMu = qMu
        args.qNu1 = qNu1
        args.qNu2 = qNu2
        args.maintenance = maintenance
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieveEst(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieveEst_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieveEst failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["retrieveEst"] = Processor.process_retrieveEst
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_retrieveEst(self, seqid, iprot, oprot):
        args = retrieveEst_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieveEst_result()
        try:
            result.success = self._handler.retrieveEst(args.eMu, args.eMuEma, args.eNu1, args.eNu2, args.qMu, args.qNu1, args.qNu2,
                                                       args.maintenance)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieveEst", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES


class retrieveEst_args(object):
    """
    Attributes:
     - eMu
     - eMuEma
     - eNu1
     - eNu2
     - qMu
     - qNu1
     - qNu2
     - maintenance

    """

    def __init__(self, eMu=None, eMuEma=None, eNu1=None, eNu2=None, qMu=None, qNu1=None, qNu2=None, maintenance=None, ):
        self.eMu = eMu
        self.eMuEma = eMuEma
        self.eNu1 = eNu1
        self.eNu2 = eNu2
        self.qMu = qMu
        self.qNu1 = qNu1
        self.qNu2 = qNu2
        self.maintenance = maintenance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.eMu = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.eMuEma = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.eNu1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.eNu2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.qMu = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.qNu1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.qNu2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.maintenance = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieveEst_args')
        if self.eMu is not None:
            oprot.writeFieldBegin('eMu', TType.DOUBLE, 1)
            oprot.writeDouble(self.eMu)
            oprot.writeFieldEnd()
        if self.eMuEma is not None:
            oprot.writeFieldBegin('eMuEma', TType.DOUBLE, 2)
            oprot.writeDouble(self.eMuEma)
            oprot.writeFieldEnd()
        if self.eNu1 is not None:
            oprot.writeFieldBegin('eNu1', TType.DOUBLE, 3)
            oprot.writeDouble(self.eNu1)
            oprot.writeFieldEnd()
        if self.eNu2 is not None:
            oprot.writeFieldBegin('eNu2', TType.DOUBLE, 4)
            oprot.writeDouble(self.eNu2)
            oprot.writeFieldEnd()
        if self.qMu is not None:
            oprot.writeFieldBegin('qMu', TType.DOUBLE, 5)
            oprot.writeDouble(self.qMu)
            oprot.writeFieldEnd()
        if self.qNu1 is not None:
            oprot.writeFieldBegin('qNu1', TType.DOUBLE, 6)
            oprot.writeDouble(self.qNu1)
            oprot.writeFieldEnd()
        if self.qNu2 is not None:
            oprot.writeFieldBegin('qNu2', TType.DOUBLE, 7)
            oprot.writeDouble(self.qNu2)
            oprot.writeFieldEnd()
        if self.maintenance is not None:
            oprot.writeFieldBegin('maintenance', TType.BOOL, 8)
            oprot.writeBool(self.maintenance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(retrieveEst_args)
retrieveEst_args.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'eMu', None, None,),  # 1
    (2, TType.DOUBLE, 'eMuEma', None, None,),  # 2
    (3, TType.DOUBLE, 'eNu1', None, None,),  # 3
    (4, TType.DOUBLE, 'eNu2', None, None,),  # 4
    (5, TType.DOUBLE, 'qMu', None, None,),  # 5
    (6, TType.DOUBLE, 'qNu1', None, None,),  # 6
    (7, TType.DOUBLE, 'qNu2', None, None,),  # 7
    (8, TType.BOOL, 'maintenance', None, None,),  # 8
)


class retrieveEst_result(object):
    """
    Attributes:
     - success

    """

    def __init__(self, success=None, ):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.DOUBLE:
                    self.success = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieveEst_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.DOUBLE, 0)
            oprot.writeDouble(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(retrieveEst_result)
retrieveEst_result.thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None,),  # 0
)
fix_spec(all_structs)
del all_structs
